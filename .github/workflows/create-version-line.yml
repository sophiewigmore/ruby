name: Create Version Line Branch

on:
  workflow_dispatch: {}

# avoid edge cases with version line creation / release creation
concurrency: release

jobs:
  create-version-line-branch:
    name: Create Version Line Branch Off Of Main
    runs-on: ubuntu-22.04
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 0  # gets full history
        fetch-tags: true
        token: ${{ secrets.PAKETO_BOT_GITHUB_TOKEN }}
    - name: Get Version Line Number
      id: latest
      run: |
        # Get the last version line branch in the form of <major>.<minor>.x
        git branch -a
        latest=$(git branch -a | grep -P "\d+\.\d+\.x" | sort -V | tail -n1 | sed -e 's/remotes\/origin\///g')

        # If there is no previous version line branch in the form of <major>.<minor>.x, base version line off last release
        # ex. Last release 1.2.3, create version line 1.2.x
        # Otherwise, base new version line off of last version line + minor bump
        # ex. Last version line was 1.2.x, create version line 1.3.x
        if [[ -z ${latest} ]]; then
          latest_tag=$(git describe --tags --abbrev=0)
          new_version_line=$(echo ${latest_tag#v} | awk -F'[.]' '{printf("%d.%d.x\n", $1, $2)}')
        else
          echo "Last version line branch: ${latest}"
          # Bump the minor version in the version line branch
          new_version_line=$(echo $latest | awk -F'[.]' '{minor=$2; minor+=1; printf("%d.%d.%s\n", $1, minor, $3)}')
        fi
        echo "New version line branch: ${new_version_line}"
        echo "new_version_line=${new_version_line}" >> "$GITHUB_OUTPUT"
    - name: Create Version Line Branch
      id: create-branch
      run: |
        # Get the latest release in the version line already
        # 1.3.x -> 1.3.*
        tag_search=$(echo ${{ steps.latest.outputs.new_version_line }} | awk -F'[.]' '{printf("%d.%d.*\n", $1, $2)}')
        # ex. Get the latest tag matching `git tag -l v1.3.*`
        latest_release_tag=$(git tag -l v${tag_search} | sort -V | tail -n1)

        # if there are no pre-existing releases in the version line, base it off main
        if [[ -z $latest_release_tag ]]; then
          latest_release_tag=main;
        fi

        git checkout -b ${{ steps.latest.outputs.new_version_line }} ${latest_release_tag}

    - name: Modify Version Line Automation
      id: modify-automation
      run: |
        pushd .github/workflows
          sed -i 's/\-\ \main/\-\ ${{ steps.latest.outputs.new_version_line }}/g' *.yml
        popd
        git diff

    - name: Commit
      id: commit
      uses: paketo-buildpacks/github-config/actions/pull-request/create-commit@main
      with:
        message: "Update workflows for ${{ steps.latest.outputs.new_version_line }}"
        pathspec: ".github/workflows"
        committer_name: sophiewigmore
        committer_email: swigmore@vmware.com

    - name: Push Branch '${{ steps.latest.outputs.new_version_line }}'
      if: ${{ steps.commit.outputs.commit_sha != '' }}
      uses: paketo-buildpacks/github-config/actions/pull-request/push-branch@main
      with:
        branch: ${{ steps.latest.outputs.new_version_line }}

    - name: Update Dependabot Config
      run: |
        git checkout main
        pushd .github
          cat dependabot.yml | yq .updates | sed 's/target-branch: main/target-branch: ${{ steps.latest.outputs.new_version_line }}/g' >> dependabot.yml
        popd
        git diff

    - name: Commit
      id: commit-2
      uses: paketo-buildpacks/github-config/actions/pull-request/create-commit@main
      with:
        message: "Update Dependabot Config For ${{ steps.latest.outputs.new_version_line }} Branch"
        pathspec: ".github/"
        committer_name: sophiewigmore
        committer_email: swigmore@vmware.com

    - name: Push Branch 'main'
      if: ${{ steps.commit-2.outputs.commit_sha != '' }}
      uses: paketo-buildpacks/github-config/actions/pull-request/push-branch@main
      with:
        branch: main

    - name: Bump Mainline Tag
      run: |
        git checkout main
        new_version_line=$(echo ${{ steps.latest.outputs.new_version_line }} | awk -F'[.]' '{minor=$2; minor+=1; printf("%d.%d.0\n", $1, minor)}')
        echo "Bumping main-line version to: v${new_version_line}"
        git tag v${new_version_line}
        git push origin v${new_version_line}
